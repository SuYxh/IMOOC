1、TodoList增加功能实现思路
由于数据是从一个数组里面遍历出来的，因此我们一开始就能够确定的就是需要
定义一个数组和一个数据。那么该如何将每一条数据增加进数组里面然后再遍历
出来呢？从这里我们就可以想到需要定义一个触发增加的事件（键盘事件或者鼠
标事件），这个事件的内部逻辑很简单，就是获得页面双向绑定的数据，然后将
该数据增加到数组中，这么一想，整个实现流程就很明朗了。

备注：在v-for增加:key属性能够提升每一项的渲染效率或者性能，:key属
性的值的要求是每一项都不能相同，所以可以这样设置:key="index"(前提
是index被定义出来了，如:v-for="(item,index) of list")

2、父子组件传值的思路
其实父组件传值给子组件的地方是在调用子组件的那个位置，通过一个属性，那个
属性一定得有值，比如:content="item"中，属性为content，而属性值
则是被v-for遍历出来的值item，这是在父组件里发生的事情。在子组件中相对
来说就比较简单了，就是通过props接收从父组件传递过来的属性，然后再调用那
个属性即能够将相应的属性值渲染出来。

3、TodoList删除功能实现思路
由于真正的属性值(也就是数据)是从父组件那里传递过来的，数据也是在父组件里存
储的，因此要删除子组件中的数据，那么只能从父组件那边下手。这时就要考虑到父子
组件的通信了，也就是发布订阅模式。当子组件某个事件被触发时，那么子组件内部就
会发布一个自定义事件和相对应的参数；此时父组件监听(也称为订阅)子组件自定义
的事件，当该自定义事件被触发的时候,则在父组件里调用一个方法，实现删除的功能。

备注：如果不在子组件添加相应的参数，那么结果会是如何呢？如果在模板中这么定义:@delete="handleDelete()"
会发生什么情况呢？为什么？该如何修改才能达到这么定义:@delete="handleDelete"的效果？
